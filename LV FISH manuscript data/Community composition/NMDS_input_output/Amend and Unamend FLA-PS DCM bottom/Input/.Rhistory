'Yes' = "text",
'No' = "points"
)
),
# Objects, variables, or both?
radioButtons(
inputId = 'display',
label = 'Would you like to plot the objects, the response variables, or both?',
choices = c(
'both' = "both",
'objects' = "sites",
'variables' = "species"
)
)
),
# Download panel
tabPanel(
"Download results...",
downloadButton('downloadData.plot', 'Download ordination...'),
br(),
downloadButton('downloadData.objectCoordinates', 'Download object coordinates...'),
br(),
downloadButton('downloadData.variableCoordinates', 'Download variable coordinates...')
)
)
),
# Main panel defintion
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("print")),
tabPanel("ANOVA test of significance", verbatimTextOutput("printSig"))
)
)
)
)
server <- function(input, output, session){
# Handle uploaded response data...
datasetInput <- reactive({
input$dataset
})
datasetFile <- reactive({
if (input$useExampleData == TRUE) {
mite
} else if (input$useExampleData == FALSE) {
inFile <- datasetInput()
if (is.null(inFile))
return(NULL)
read.csv(
file = inFile$datapath,
header = input$header,
sep = input$sep,
quote = input$quote,
row.names = if(input$rownames == 0){NULL} else{input$rownames}
)
}
})
# Handle uploaded explanatory data...
explanatoryInput <- reactive({
input$explanatoryVars
})
explanatoryFile <- reactive({
if (input$useExampleData == TRUE) {
mite.env
} else if (input$useExampleData == FALSE) {
exFile <- explanatoryInput()
if (is.null(exFile))
return(NULL)
read.csv(
file = exFile$datapath,
header = input$header,
sep = input$sep,
quote = input$quote,
row.names = if(input$rownames == 0){NULL} else{input$rownames}
)
}
})
# Handle uploaded conditioning variables...
conditioningInput <- reactive({
input$conditioningVars
})
conditioningFile <- reactive({
if (input$useExampleData == TRUE) {
mite.env
} else if (input$useExampleData == FALSE) {
conFile <- conditioningInput()
if (is.null(conFile))
return(NULL)
read.csv(
file = conFile$datapath,
header = input$header,
sep = input$sep,
quote = input$quote,
row.names = if(input$rownames == 0){NULL} else{input$rownames}
)
}
})
# Generate UI element to select which conditioning variables should be used...
output$whichCondVarsUI <- renderUI({
if (is.null(input$conditioningVars) & input$useExampleData == FALSE){
HTML("") # Just some blank space
} else {
checkboxGroupInput(
inputId = "whichCondVars",
label = "Select at least one of your conditioning variables to be included in the analysis:",
choices = names(conditioningFile()),
selected = NULL
)
}
})
# Handle uploaded strata data...
strataInput <- reactive({
input$strata
})
strataFile <- reactive({
strFile <- strataInput()
if (is.null(strFile))
return(NULL)
read.csv(
file = strFile$datapath,
header = input$header,
sep = input$sep,
quote = input$quote,
row.names = if(input$rownames == 0){NULL} else{input$rownames}
)
})
# Transform data if requested...
transData <- reactive({
if(is.null(input$dataset) & input$useExampleData == FALSE)
return()
if(
!is.numeric(as.matrix(datasetFile())) &
input$transform != 'none'
)
stop("Non-numeric values detected! Transformation invalid.")
if (input$transform == 'none'){
transData <- datasetFile()
} else {
decostand(
datasetFile(),
method = input$transform,
)
}
})
# Transform explanatory data if requested...
transExpData <- reactive({
if(is.null(input$explanatoryVars) & input$useExampleData == FALSE)
return()
if(
!is.numeric(as.matrix(explanatoryFile())) &
input$expTransform != 'none'
)
stop("Non-numeric values detected! Transformation invalid.")
# A useful future enhancement: allow users to select variables to
# transform.
if (input$expTransform == 'none'){
transExpData <- explanatoryFile()
} else {
decostand(
explanatoryFile(),
method = input$expTransform,
)
}
})
# Transform conditioning data if requested...
transCondData <- reactive({
if(is.null(input$conditioningVars) & input$useExampleData == FALSE)
return()
if(
!is.numeric(as.matrix(conditioningFile()[, input$whichCondVars])) &
input$condTransform != 'none'
)
stop("Non-numeric values detected! Transformation invalid.")
# The controls above work in general, but fail if there is only one
# conditioning variable. TODO: Figure out why and how to fix.
if (input$condTransform == 'none'){
transCondData <- conditioningFile()
} else {
selectedVars <- which(
colnames(conditioningFile())
%in%
input$whichCondVars
)
# Store solution to apply colnames
temp <- decostand(
as.data.frame(
conditioningFile()[, selectedVars]
),
method = input$condTransform
)
# Attempt to conserve colnames should only 1 var be selected.
colnames(temp) <- colnames(conditioningFile())[selectedVars]
temp
}
})
# TODO: Priority: nice to have
# Add textInput to ui allowing users to select columns of the explanatoryFile
rdaSol <- reactive({
if (
(is.null(input$dataset) | is.null(input$explanatoryVars)) & input$useExampleData == FALSE
)
return()
if ((is.null(input$conditioningVars) & input$useExampleData == FALSE) | is.null(input$whichCondVars) ){
rda(
formula = transData() ~ .,
data = transExpData(),
scale = input$scaleVars
)
} else if ((!is.null(input$conditioningVars) | input$useExampleData == TRUE) | !is.null(input$whichCondVars) ) {
rda(
formula = as.formula(
paste(
"transData() ~ . + Condition(",
paste(
'transCondData()[,"',
sapply(input$whichCondVars, FUN = paste0),
'"]',
sep = "",
collapse = " + "
),
")"
)
),
data = transExpData(),
scale = input$scaleVars
)
}
})
# Test significance of model
anova <- reactive({
if(is.null(strataFile())){
anova.cca(
rdaSol()
)
} else {
anova.cca(
rdaSol(),
strata = strataFile()
)
}
})
# Prepare output
output$plot <- renderPlot({
if ((is.null(input$dataset) | is.null(input$explanatoryVars))  & input$useExampleData == FALSE)
return()
if (input$display == "both") {
ordiplot(
rdaSol(),
type = input$labels,
scaling = as.numeric(input$scaling),
col = c("red", "blue")
)
} else {
ordiplot(
rdaSol(),
type = input$labels,
scaling = as.numeric(input$scaling),
col = c("red", "blue"),
display = input$display
)
}
})
output$print <- renderPrint({
if ((is.null(input$dataset) | is.null(input$explanatoryVars))  & input$useExampleData == FALSE)
return(print("Please upload data"))
print(summary(rdaSol()))
})
output$printSig <- renderPrint({
if ((is.null(input$dataset) | is.null(input$explanatoryVars)) & input$useExampleData == FALSE)
return(print("Please upload data"))
print(anova())
})
# Prepare downloads
output$downloadData.plot <- downloadHandler(
filename <- function() {
paste('RDA_plot-', Sys.Date(), '.tiff', sep='')
},
content <- function(file) {
tiff(
file,
width = 2000,
height = 2000,
units = "px",
pointsize = 12,
res = 300
)
if (input$display == "both") {
ordiplot(
rdaSol(),
type = input$labels,
scaling = as.numeric(input$scaling),
col = c("red", "blue")
)
} else {
ordiplot(
rdaSol(),
type = input$labels,
scaling = as.numeric(input$scaling),
col = c("red", "blue"),
display = input$display
)
}
dev.off()
},
contentType = 'image/png'
)
# Download object coordinates
output$downloadData.objectCoordinates <- downloadHandler(
filename <- function() {
paste('Object_coordinates-', Sys.Date(), '.csv', sep='')
},
content <- function(file) {
write.csv(rdaSol()$CA$u, file)
},
contentType = 'text/csv'
)
# Download variable coordinates
output$downloadData.variableCoordinates <- downloadHandler(
filename <- function() {
paste('Variable_coordinates-', Sys.Date(), '.csv', sep='')
},
content <- function(file) {
write.csv(rdaSol()$CA$v, file)
},
contentType = 'text/csv'
)
} # End shiny server
#)
shinyApp(ui, server)
data(mite)
# here data need to be in .cvs format, the seperator is a ; and the decimal seperator is a ,
# Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
# here data need to be in .cvs format, the seperator is a ; and the decimal seperator is a ,
# Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
# Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
# Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
install.packages("cli")
install.packages("cli")
setwd("D:/sarah/Documents/Dropbox/GitHub Repositories/EN638-Atlantic-Endeavor-Cruise-2019/LV FISH manuscript data/Community composition")
setwd("D:/sarah/Documents/Dropbox/GitHub Repositories/EN638-Atlantic-Endeavor-Cruise-2019/LV FISH manuscript data/Community composition/NMDS_input_output/Amended and Unamended FLA-PS DCM and bottom/Input")
#Load packages
library(vegan)
library(maptools)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(gridExtra)
library(dplyr)
library(plyr)
library(reshape2)
library(grid)
library(readxl)
#Load ggpattern and magick packages so that patterns can be added over colors
library(ggpattern)
library(magick)
#Load ggh4x to enable the facet_nested function, which allows graphs to have
#multiple, stacked facets
library(ggh4x)
library("vegan")
library("maptools")
library("ggplot2")
library("ggpubr")
library("cowplot")
library("gridExtra")
library("dplyr")
library("plyr")
library("reshape2")
library("grid")
library("readxl")
library("patchwork")
#Here, data need to be in .csv format, the separator is a ; and the decimal separator is a ,
#Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
#Environmental data submission
contex<<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
#Factors data submission
biome <<- read.csv(file.choose(), sep="," ,header = TRUE, row.names = 1, dec = ".")
setwd("D:/sarah/Documents/Dropbox/GitHub Repositories/EN638-Atlantic-Endeavor-Cruise-2019/LV FISH manuscript data/Community composition/NMDS_input_output/Amended and Unamended FLA-PS DCM and bottom/Input")
#Here, data need to be in .csv format, the separator is a ; and the decimal separator is a ,
#Community data submission
comm <<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
#Environmental data submission
contex<<- read.csv(file.choose(), header = TRUE, sep=",", row.names = 1, dec = ".")
#Factors data submission
biome <<- read.csv(file.choose(), sep="," ,header = TRUE, row.names = 1, dec = ".")
x <- comm
y <- contex
#species number
sn<-specnumber(x)
png(filename="Richness.png", width=1500, height=1450, res=250)
par( bty="n")
plot(sn, main="Richness", col="black", xlab="", ylab="") # no x and y labels, x and y limits set.
lines(sn,col="grey20",lwd=3) 		        		# join points with pint line, width 3
mtext(side=1,line=2.5,cex=1,"Sample") 			# add text under side 1 of plot
mtext(side=2,line=2.5,cex=1,"Richness") 		# add text under side 2 of plot
text(sn, row.names(x), cex=0.6, pos=3, col="grey20") 	# add text to dots, pos is location of text
dev.off()
#frequencies of species
snfreq<- specnumber(x, MARGIN=2)
png(file="Genus_Frequency.png", width=1500, height=1450, res=250)
par( bty="n")
plot(snfreq, main="Genus Frequency", col="black", xlab="", ylab="")
mtext(side=1,line=2.5,cex=1,"Genus Frequencey")
mtext(side=2,line=2.5,cex=1,"Sample")
dev.off()
# shannon-weaver
h<-diversity(x)
png(file="Shannon_Weaver.png", width=1500, height=1450, res=250)
par( bty="n")
plot(h, main="Shannon-Weaver", col="black", xlab="", ylab="")
mtext(side=1,line=2.5,cex=1,"Sample")
mtext(side=2,line=2.5,cex=1,"Shannon Index")
text(h, row.names(x), cex=0.6, pos=1, col="grey20")
dev.off()
# simpsons
s<-diversity(x,index="simpson")
png(file="Simpson.png", width=1500, height=1450, res=250)
par( bty="n")
plot(s, main="Simpsons", col="black", xlab="", ylab="")
mtext(side=1,line=2.5,cex=1,"Sample")
mtext(side=2,line=2.5,cex=1,"Simpsons Index")
text(s, row.names(x), cex=0.6, pos=1, col="grey20")
dev.off()
# inverse simpsons
i<-diversity(x, index="invsimpson")
png(file="Inverse_Simpson.png", width=1500, height=1450, res=250)
par( bty="n")
plot(i, main="inverse Simpsons", col="black", xlab="", ylab="")
mtext(side=1,line=2.5,cex=1,"Sample")
mtext(side=2,line=2.5,cex=1,"Inverse Simpsons Index")
text(i, row.names(x), cex=0.6, pos=1, col="grey20")
dev.off()
#Evenness
j<-h/log(specnumber(x))
png(file="Eveness_bacteria.png", width=1500, height=1450, res=250)
par( bty="n")
plot(j, main="Evenness", col="black" , xlab="", ylab="") # ylim may cause issue change to just plot(j)
mtext(side=1,line=2.5,cex=1,"Depth")
mtext(side=2,line=2.5,cex=1,"Eveness")
text(j, row.names(x), cex=0.6, pos=1, col="grey20")
dev.off()
#species richness per factor (province)
attach(biome)# attach dataframe with factor!!
png(file="Species_richness_with_depth.png", width=1500, height=1450, res=200)
boxplot(specnumber(comm) ~ Depth, xlab = "Depth")
dev.off()
png(file="Species_richness_between_IncubationTime.png", width=1500, height=1450, res=200)
boxplot(specnumber(comm) ~ IncubationTime, xlab = "Incubation time [h]")
dev.off()
png(file="Species_richness_between_Substrates.png", width=1500, height=1450, res=200)
boxplot(specnumber(comm) ~ Substrate, xlab = "Substrate")
dev.off()
#Results return values for all diversity indecies in diversity_results.csv file
results<-list(sn=sn, h=h, s=s, i=i, j=j)
write.table(results, file = "diversity_results.csv", sep = "\t", row.names=TRUE, col.names=TRUE)
return(results)
sample = row.names(x)
# bray curtis tree calculation
bray_cluster<-vegdist(x, "bray", na.rm=TRUE)  # calculate Bray-Curtis distance among samples
treesin=hclust(bray_cluster, method="single")
treeave=hclust(bray_cluster, method="average")  # cluster communities using average-linkage algorithm
treecom=hclust(bray_cluster, method="complete")
png(file="Tree_braycurtis.png", width=1500, height=1450, res=200)
par(mfrow=c(3,1))
plot(treesin, hang=-1, main="single")
plot(treeave, hang=-1, main="average")  # cluster communities using average-linkage algorithm
plot(treecom, hang=-1, main="complete")
dev.off()
# Jaccard tree calculation
jaccard_cluster<-vegdist(x, "jaccard", na.rm=TRUE)  # calculate Jaccard distance among samples
treesin=hclust(jaccard_cluster, method="single")
treeave=hclust(jaccard_cluster, method="average")
treecom=hclust(jaccard_cluster, method="complete")
png(file="Tree_jaccard.png", width=1500, height=1450, res=200)
par(mfrow=c(3,1))
plot(treesin, hang=-1, main="single")
plot(treeave, hang=-1, main="average")
plot(treecom, hang=-1, main="complete")
dev.off()
# bootstrap tree
t_vector=t(x)     # transpose data set
library(pvclust)
tree=pvclust(t_vector, method.hclust="ward", nboot=1000, method.dist="euclidean")
png(file="Tree_bootstrapped_all_mesos.png", width=1500, height=1450, res=200)
par(mfrow=c(1,1))
plot(tree, hang=-1, main="boot")
pvrect(tree, alpha=.95, border=2, lwd=3)		# bootstrap
dev.off()
#########################################################
#                   NMDS
#########################################################
#Calculate Bray-Curtis distances among samples based on species P/A/abundance
bray_all <- vegdist(x, method="bray")
mds_bray<-metaMDS(x, k=2, distance="bray") # robustness
png(file="stressplot.png", width=1500, height=1450, res=200)   # Assess goodness of ordination fit (stress plot)
stressplot(mds_bray, bray_all, pch=".", p.col="black", l.col="black")
dev.off()
#Calculate Jaccard distances among samples based on species P/A/abundance
jaccard_all <- vegdist(x, method="jaccard")
mds_jaccard<-metaMDS(x, K=2, distance="jaccard")
png(file="stressplot_jaccard.png", width=1500, height=1450, res=200)
stressplot(mds_jaccard, jaccard_all, pch="." , p.col="black", l.col="black")
dev.off()
y<-contex
rank<-rankindex(y, x, c("euc","man","bray","jac","kul"))
ef<-envfit(mds_bray, y, permu=999)
ano_Substrate = anosim(comm, y$Substrate, distance = "bray", permutations = 9999)
ano_Substrate
